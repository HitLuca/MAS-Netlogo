;loads the distances matrix in memory
to-report load-distances
  file-open "data/distances.txt"
  let distances_matrix file-read
  file-close
  report distances_matrix
end

;station connected to origin that is closer to the destination
to-report station-closer-to-destination [origin destination]
  let minimum_distance measure-distance origin destination
  let nearest_station origin
  
  let adjacent_stations item origin graph
  foreach adjacent_stations [
    let new_distance measure-distance ? destination
    if new_distance < minimum_distance [
      set minimum_distance new_distance
      set nearest_station ?
    ]
  ]
  report nearest_station
end

;checks if two stations are directly connected or not
to-report is-connected [origin destination]
  report member? destination item origin graph
end

;returns the optimal station to move given the loaded passengers destinations
to-report get-optimal-station
  let connected_stations item current_stop graph
  let gain map [ get-gain ? ] connected_stations
  ifelse max gain > 0 [report item max-index gain connected_stations][report (- 1)]
end

;returns the minimum distance between two stations
to-report measure-distance [station0 station1]
  report item station0 item station1 distance_matrix
end

;returns the minimum distance if a passenger would be moved to the given station
to-report distance-shortened [station0 station1 passenger]
  let distance0 measure-distance station0 item 1 passenger
  let distance1 measure-distance station1 item 1 passenger
  report distance1 < distance0
end

; count how many passengers get their trip shortened (distance-shortened)
to-report passenger-gain [station0 station1]
  let passengers_gain length (filter [ distance-shortened station0 station1 ?] get-passengers-at-stop station0)
  ;in case we are not yet in a station we also add the passengers in the bus
  set passengers_gain passengers_gain + length (filter [ distance-shortened station0 station1 ?] bus_passengers)
  report passengers_gain
end

to-report consider-migration
  let gain n-values 24 [ get-attractivness ? 1]
  ifelse max gain > 0 [
    set mother_station max-index gain
    set going_in_service true
    report true
  ] [
  report false
  ]
end

to-report get-gain [station]
  let passengers_gain passenger-gain current_stop station
  
  let waiting_passengers length get-passengers-at-stop station
  let bus_count_for_stop length item station bus_beliefs
  let prior get-passengers-next-quarter station
  
  let waiting_passengers_denominator 0
  let bus_count_for_stop_denominator 0
  let prior_denominator 0
  foreach item current_stop graph[
    if waiting_passengers != 0 [
      set waiting_passengers_denominator waiting_passengers_denominator + length get-passengers-at-stop ?
    ]
    if bus_count_for_stop != 0 [
      set bus_count_for_stop_denominator bus_count_for_stop_denominator + length item ? bus_beliefs
    ]
    if prior != 0 [
      set prior_denominator prior_denominator + get-passengers-next-quarter ?
    ]
  ]
  
  if waiting_passengers_denominator != 0 [
    set waiting_passengers waiting_passengers / waiting_passengers_denominator
  ]
  if bus_count_for_stop_denominator != 0 [
    set bus_count_for_stop bus_count_for_stop / bus_count_for_stop_denominator
  ]
  if prior_denominator != 0 [
    set prior prior / prior_denominator
  ]
  
  let  gain  (1 * passengers_gain) + (0.7 * waiting_passengers) + (0.5 * prior) - (70 * (bus_count_for_stop))
  
  report gain
end
