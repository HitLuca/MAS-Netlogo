;cleans the bus inbox
;to clean-inbox-order
;  foreach inbox [
;    let msg_type item 0 item 2 ?
;    if msg_type = "insufficient-capacity"[ set handled lput ? handled ]
;  ]
;  foreach handled[ set inbox remove ? inbox ]
;end

;message handling routine
to handle-messages
  let handled []
  
  ;let help_requests []
  ;let taken false
  ;let taken_buses []
  let positive_votes 0
  let negative_votes 0

  foreach inbox[  
;  while[ind < length inbox ][
    ;if not member? item ind inbox inbox_read [ ;TO BE ADDED so we ignore messagfes that were already read. (ludacris)
    let message item 2 ? ;item ind inbox
    let sender item 1 ? ;item ind inbox
    let msg_tick item 0 ? ;item ind inbox
    let msg_type item 0 message
       
;    if msg_type = "redirect"[
;      set mother_station item 1 message
;      set going_in_service true
;      set handled lput (item ind inbox) handled
;      let dist_to_closest 0
;      
;      
;      let station current_stop
;      if current_stop = -1[
;        ifelse previous_stop = -1
;        [set dist_to_closest  measure-distance 3 next_stop]
;        [set dist_to_closest  measure-distance 3 next_stop]
;        set station next_stop]
;      let dist dist_to_closest + measure-distance station mother_station
;      
;      send-message (item 0 (item mother_station fixed_buses)) lput dist ["confirm-redirect"]
;    ]
    
;    if msg_type = "ask-help"[
;      let destination item 1 message
;      let preferences item 2 message
;      
;      let i 0
;      while[i < length preferences and member? (item i preferences) taken_buses]
;      [
;        set i i + 1
;      ]
;      
;      ifelse i < length preferences
;      [
;        send-message  (item i preferences) lput destination ["redirect"]
;        set taken_buses lput (item i preferences) taken_buses
;      ]
;      [
;        send-message leader lput 2 lput destination ["order"]
;      ]
;      set handled lput (item ind inbox) handled
;    ]
    
;    if msg_type = "ask-redirect"
;    [
;      if not taken
;      [
;        send-message sender ["confirm-redirect"]
;        set taken true
;      ]
;      set handled lput (item ind inbox) handled
;    ]
    
    
;    if msg_type = "confirm-redirect"[
;      set wait_help_delay item 1 message
;;      set help_candidates lput sender help_candidates
;      set handled lput (item ind inbox) handled
;    ]

;    if msg_type = "ask-support"[
;      if not going_in_service[
;        let to_sender_station item 1 message
;        let from current_stop
;        if current_stop = -1[
;          set from next_stop
;        ]
;        
;        let dist measure-distance from to_sender_station
;        
;        let free_seats (get-capacity - length bus_passengers)
;        
;        if dist <= help_distance_threshold
;        [
;          send-message sender lput free_seats lput dist ["info-support"]
;        ]
;      ]
;      set handled lput (item ind inbox) handled
;    ]
    
;    if msg_type = "info-support"[
;      let dist item 1 message
;      let free_seats item 2 message
;      set help_candidates lput (lput free_seats lput dist lput sender []) help_candidates
;      
;      set handled lput (item ind inbox) handled
;    ]

    if msg_type = "init"[
      set mother_station item 1 message
      set bus_count item 2 message
      set station_beliefs item 3 message
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
    if msg_type = "new-bus"[
      set bus_count (bus_count + 1)
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
    if msg_type = "order"[
      ifelse not member? ? pending_orders[
        add-bus (item 2 message)
        let new_bus_id (bus_count + 25)
        ;        show new_bus_id
        set new_buses lput new_bus_id new_buses
        set pending_orders lput ? pending_orders
        set bus_count (bus_count + 1)
      ]
      [
        let sender_mother_station item 1 message
        send-message (item 0 new_buses ) (list "init" sender_mother_station bus_count station_beliefs)
        ;send-message sender lput (item 0 new_buses ) ["new-companion"]
        
        ;        set independent_buses lput (item 0 new_buses) independent_buses
        let i 0
        while [i < bus_count][
          let id i + 24
          if not (id = bus_id)[
            send-message id lput (item 0 new_buses ) ["new-bus"]
          ]; let everyone know there's a new independent bus and its ID
          set i (i + 1)
        ]
        
        set pending_orders remove-item 0 pending_orders
        set new_buses remove item 0 new_buses new_buses
        set handled lput ? handled ; (item ind inbox) handled
      ]
    ]
    
    
    
    if msg_type = "ask-vote"[
      let sender_current_stop item 1 message
      let sender_left_down item 2 message
      
      let my_station current_stop
      if my_station = -1 [ set my_station next_stop ]
      
      let dist measure-distance sender_current_stop my_station
      if dist <= 20[
        let vote (bus-needed? sender_left_down sender_current_stop)
        send-message sender lput vote ["vote"]
      ]
      
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
    if msg_type = "vote"[
      let vote item 1 message
      
      ifelse vote[
        set positive_votes positive_votes + 1
      ]
      [
        set negative_votes negative_votes + 1
      ]
      
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
    if msg_type = "moving-to"[
      let station item 1 message
      let eta item 2 message
      let new_station_belief lput (list sender eta) (item station station_beliefs)
      set station_beliefs replace-item station station_beliefs new_station_belief
      
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
;    foreach message
;    [
;      let submessage ?
;      let msg_type item 0 submessage
;      if msg_type = "init"
;      [
;        set mother_station item 1 submessage
;        set handled lput ind handled
;        ]
;      ]
  ]
  
  if item 0 asked_support and (1 + positive_votes - negative_votes) > 0[
    send-message leader lput 2 lput mother_station ["order"]
  ]
  
  if length inbox > 0 [ show inbox ]
      
  foreach handled[ set inbox remove ? inbox ] ;set inbox_read lput ? inbox_read TO BE ADDED so we do not delete messages
  
;  if length help_requests > 0[ ;if there were help requests run the procedure to see if a new bus is needed
;    bus-needed? help_requests
;  ]
  
  if item 0 asked_support [
    if item 1 asked_support + 2 + wait_help_delay < ticks [
;      let preferences get-redirect-preferences
;      ifelse preferences = [][
;        send-message leader lput 2 lput mother_station ["order"]
;      ]
;      [
;        send-message leader lput preferences lput mother_station ["ask-help"]
;      ]
       set asked_support [false 0]
    ]
  ]  
end

to update-others-on-choice [ destination ]
  if destination != -1[
    let i 1
    let eta ticks + floor (measure-distance current_stop destination)
    while [ i <= bus_count ][
      if i + 23 != bus_id[
        send-message (i + 23) lput eta lput destination ["moving-to"]
      ]
      set i (i + 1)
    ]
  ]
end

to call-vote [left_down station]
  let i 1
  while [ i < bus_count ] [
    if i + 23 != bus_id[
      send-message (i + 23) lput left_down lput station ["ask-vote"]
    ]
    set i (i + 1)
  ]
  set asked_support lput ticks [true 0]
end
