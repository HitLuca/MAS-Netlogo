;message handling routine
to handle-messages
  let handled []
  
  foreach inbox [  
    let message item 2 ?
    let sender item 1 ?
    let msg_tick item 0 ?
    let msg_type item 0 message
    
    
    if msg_type = "init" [
      set mother_station item 1 message
      set bus_count item 2 message
      set bus_beliefs item 3 message
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
    if msg_type = "new-bus" [
      set bus_count (bus_count + 1)
      let destination_station item 2 message
      
      let i 0
      
      while [i < length asked_support] [
        let station_support item i asked_support
        if item 0 station_support = destination_station [
          let wait_help_delay ceiling measure-distance destination_station 3
          set asked_support replace-item i asked_support (list destination_station ticks wait_help_delay )
          set i length asked_support
        ]
        set i i + 1
      ]
      
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
    if msg_type = "order" [
      ifelse not member? ? pending_orders [
        add-bus (item 2 message)
        let new_bus_id (bus_count + ordered_bus_count + 24)
        ; show new_bus_id
        set new_buses lput new_bus_id new_buses
        set pending_orders lput ? pending_orders
        set ordered_bus_count (ordered_bus_count  + 1)
      ] [
      let sender_mother_station item 1 message
      
      send-message (item 0 new_buses ) (list "init" sender_mother_station bus_count bus_beliefs)
      set bus_count (bus_count + 1)
      set ordered_bus_count (ordered_bus_count  - 1)
      
      let i 0
      while [i < bus_count][
        let id i + 24
        if not (id = bus_id)[
          send-message id (list "new-bus" (item 0 new_buses) sender_mother_station)
        ]; let everyone know there's a new independent bus and its ID
        set i (i + 1)
      ]
      
      set pending_orders remove-item 0 pending_orders
      set new_buses remove item 0 new_buses new_buses
      set handled lput ? handled ; (item ind inbox) handled
      ]
    ]
    
    
    
    
    if msg_type = "ask-vote" [
      let sender_current_stop item 1 message
      let sender_left_down item 2 message
      
      let my_station current_stop
      if my_station = -1 [ set my_station next_stop ]
      
      if  next_stop = sender_current_stop [
        let wait_help_delay 0;ceiling measure-distance sender_current_stop 3
        
        set asked_support lput (list sender_current_stop ticks wait_help_delay ) asked_support
      ]
      
      let selected_stop current_stop
      
      if selected_stop = -1 [
        set selected_stop  next_stop
      ]
      
      let dist measure-distance sender_current_stop selected_stop
      
      let free_seats_ratio 1
      
      ifelse faction = "cheap" [
        set free_seats_ratio 0.25
      ] [
      set free_seats_ratio 0.5
      ]
      
      if dist <= dist_threshold [
        let vote (bus-needed? sender_left_down sender_current_stop)
        
        ifelse vote [
          set vote "yes" 
        ] [
        if dist <= dist_threshold and get-capacity - length bus_passengers > (get-capacity * free_seats_ratio) [
          if faction = "cheap" [
            let test_fast_bus_needed bus-needed-eval sender_left_down sender_current_stop 200
            ; show test_fast_bus_needed
            if test_fast_bus_needed[
              send-message sender lput dist lput "help" ["vote"]
            ]
          ]
        ]
        
        set vote "no" 
        ]
        
        if dist <= 20 [
          send-message sender lput vote ["vote"]
        ]
      ]
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
    if msg_type = "vote" and ticks > msg_tick [
      let vote item 1 message
      
      if vote = "yes"[
        set positive_votes positive_votes + 1
      ]
      if vote = "no" [
        set negative_votes negative_votes + 1
      ]
      if vote = "help" [
        let help_distance item 2 message;
                                        ; show help_distance
        if help_distance <= dist_threshold and (length help_info = 0 or help_distance < item 1 help_info) [
          set help_info list sender help_distance
        ]
      ]
      
      set handled lput ? handled ; (item ind inbox) handled
    ]
    
    if msg_type = "confirm-help"[
      set mother_station item 1 message
      set going_in_service true
      
      set handled lput ? handled 
    ]     
  ]
  
  ;if length inbox > 0 [ show inbox ]
  
  foreach handled[ set inbox remove ? inbox ]
end

to handle-voting
  let wait_voting_delay 3
  if length asked_support > 0 [
    ; show asked_support
    let to_delete []
    foreach asked_support [
      let voting_station item 0 ?
      let voting_start item 1 ?
      let wait_for_bus_delay item 2 ?  
      
      ;wait for the voting to finish and act according to the results
      if voting_station = initiated_voting_station and voting_start + wait_voting_delay = ticks [
        
        ifelse length help_info != 0 [
          send-message item 0 help_info lput initiated_voting_station ["confirm-help"]
        ] [
        if (positive_votes - negative_votes) > 0 [
          send-message leader (list "order" initiated_voting_station 3)
        ]
        ]
        
        set positive_votes 0
        set negative_votes 0
        set initiated_voting_station -1
        set help_info []
      ]
      
      ;wait for the ordered bus to arrive before initiating another voting
      if voting_start + wait_voting_delay + wait_for_bus_delay < ticks [ 
        set to_delete lput ? to_delete
      ]
    ]
    
    foreach to_delete [
      set asked_support remove ? asked_support
    ]
  ] 
end

to call-vote [left_down station]
  foreach n-values bus_count [ ? + 24 ] [
    if ? != bus_id [
      send-message ? (list "ask-vote" station left_down)
    ]
  ]
  
  set positive_votes 1
  set negative_votes 0
  set initiated_voting_station station
  
  let wait_help_delay 0 ;ceiling measure-distance current_stop 3
  set asked_support lput (list current_stop ticks wait_help_delay ) asked_support
end
